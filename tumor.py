import os
import cv2
import numpy as np
import random


def tumor():

    path = "C:/Users/hp/OneDrive/Desktop/Speech assistant/brain_tumor_dataset/yes"

    random_filename = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])

    print(random_filename)
    img_path="C:/Users/hp/OneDrive/Desktop/Speech assistant/brain_tumor_dataset/yes/"+random_filename

    image1 = cv2.imread(img_path)
    # cv2.imshow('image',image1)
    print("width: {} pixels".format(image1.shape[1]))
    print("height: {} pixels".format(image1.shape[0]))
    print("channels: {}".format(image1.shape[2]))
    dim=(500,590)
    image1=cv2.resize(image1, dim)
    cv2.imshow('image',image1)
    cv2.waitKey(5000)

    gray = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY, 0.7)
    cv2.imshow('gray_image',gray)
    cv2.waitKey(5000)

    (T, thresh) = cv2.threshold(gray, 142, 255, cv2.THRESH_BINARY)
    cv2.imshow('threshhold_img',thresh)
    cv2.waitKey(5000)

    (T, threshInv) = cv2.threshold(gray, 142, 255, cv2.THRESH_BINARY_INV)
    cv2.imshow('threshhold_inverse',threshInv)
    cv2.waitKey(5000)

    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (10, 5))
    closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
    cv2.imshow('morphological_operation',closed)
    cv2.waitKey(5000)

    # img=cv2.subtract(thresh,closed)
    # cv2.imshow('image_subin', img)
    # cv2.waitKey(5000)

    closed = cv2.erode(closed, None, iterations = 15)
    # cv2.imshow('eroded',closed1)
    # cv2.waitKey(2000)
    closed = cv2.dilate(closed, None, iterations = 13)
    cv2.imshow('dilated and eroded',closed)
    cv2.waitKey(5000)

    ret,mask = cv2.threshold(closed, 155, 255, cv2.THRESH_BINARY)
    #apply AND operation on image and mask generated by thrresholding
    final = cv2.bitwise_and(image1,image1,mask = mask)
    cv2.imshow('final_image',final)
    cv2.waitKey(5000)

    def auto_canny(image, sigma=0.33):
        # compute the median of the single channel pixel intensities
        v = np.median(image)
        # apply automatic Canny edge detection using the computed median
        lower = int(max(0, (1.0 - sigma) * v))
        upper = int(min(255, (1.0 + sigma) * v))
        edged = cv2.Canny(image, lower, upper)
        # return the edged image
        return edged
    canny = auto_canny(closed)
    cv2.imshow('canny image',canny)
    cv2.waitKey(5000)

    (cnts, _) = cv2.findContours(canny.copy(), cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
    cv2.drawContours(image1, cnts, -1, (0, 0, 255), 2)
    cv2.imshow('contored image',image1)
    cv2.waitKey(5000)
    cv2.destroyAllWindows()


